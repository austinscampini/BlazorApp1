@page "/"
@using SpotifyAPI.Web
@using System
@using Microsoft.Extensions.Configuration

@using BlazorApp1.Components.API

@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<h1>Hello, world!</h1>

<p>

</p>

@if (_me != null)
{
  <h2>Welcome @_me.DisplayName!</h2>
  <p>
    You have a grant total of @_totalPlaylistCount playlists!
  </p>
}
else
{
    <p>Loading...</p>
    <p>@_totalPlaylistCount</p>
}

@code {
  /*private bool _isAuthed = false;

  private PrivateUser _me;

  private int? _totalPlaylistCount;

  private Uri _authUri;*/

  private PublicUser _me;

  private int? _totalPlaylistCount;

  private string User = "21tjo6kw2m3xmughfqwygtrfy";

  protected override void OnInitialized()
  {
    /*if (!string.IsNullOrEmpty(@Configuration["Spotify:CLIENT_ID"]))
    {
      var baseUri = navManager.ToAbsoluteUri("http://127.0.0.1:5267/");

      var loginRequest = new LoginRequest(baseUri, @Configuration["Spotify:CLIENT_ID"], LoginRequest.ResponseType.Token)
      {
        Scope = new[] { Scopes.PlaylistReadPrivate, Scopes.PlaylistReadCollaborative }
      };
      _authUri = loginRequest.ToUri();
    }*/
  }

  protected override async Task OnInitializedAsync()
  {
    /*var uri = new Uri("http://localhost:5267/");
    var maxLen = Math.Min(1, uri.Fragment.Length);
    Dictionary<string, string> fragmentParams = uri.Fragment.Substring(maxLen)?
      .Split("&", StringSplitOptions.RemoveEmptyEntries)?
      .Select(param => param.Split("=", StringSplitOptions.RemoveEmptyEntries))?
      .ToDictionary(param => param[0], param => param[1]) ?? new Dictionary<string, string>();

    Console.WriteLine(fragmentParams);

    _isAuthed = fragmentParams.ContainsKey("access_token");
    if (_isAuthed)
    {
      var spotify = new SpotifyClient(fragmentParams["access_token"]);

      _me = await spotify.UserProfile.Current();
      _totalPlaylistCount = (await spotify.Playlists.CurrentUsers()).Total;
    }*/

        await Task.Delay(1); 
        if(@Configuration["Spotify:CLIENT_ID"] is null || @Configuration["Spotify:SECRET"] is null) {
            FlagErrorPage();
        }
        GetPlaylistCount();
  }



  private async void GetPlaylistCount() 
    {
        try {

            var config = SpotifyClientConfig.CreateDefault();

            var request = new ClientCredentialsRequest(@Configuration["Spotify:CLIENT_ID"], @Configuration["Spotify:SECRET"]);

            var response = await new OAuthClient(config).RequestToken(request);

            var spotify = new SpotifyClient(response.AccessToken);

            var playlists = await spotify.Playlists.GetUsers("21tjo6kw2m3xmughfqwygtrfy");

            _totalPlaylistCount = playlists.Total;

            //_totalPlaylistCount = await spotify.UserProfile.Get(User).;

            StateHasChanged();
        } catch (NullReferenceException) {
                FlagErrorPage();
           
        }
    }

    /*private void NavigateTo(String refCode)
    {
        NavigationManager.NavigateTo($"/musicplayer/{refCode}");
    }
    */
    private void FlagErrorPage() {
        NavigationManager.NavigateTo($"/error");
    }

}