@page "/counter"
@using Microsoft.VisualBasic
@using SpotifyAPI.Web
@using SpotifyAPI;
@using Swan.Threading
@rendermode InteractiveServer
@inject IConfiguration Configuration

@if (Tracks == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <PageTitle>@playlistName</PageTitle>
        <h1>@playlistName</h1>
     <thead>
            <tr>
                <th>Track List</th>
            </tr>
        </thead>
    <table class="table">
        <tbody>
            @foreach (var Track in Tracks)
            {
                <tr>
                    <td>@Track.Album.Name</td>
                    <td>@Track.Artists.</td>
                    <td>@Track.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FullTrack> Tracks { get; set; } = new List<FullTrack>();
    private String playlistName = "Loading";

    protected override async Task OnInitializedAsync()
    {
        
        await Task.Delay(1000); 
        GetPlaylist();
    }
    private async void GetPlaylist() 
    {
      var config = SpotifyClientConfig.CreateDefault();

      var request = new ClientCredentialsRequest(@Configuration["Spotify:CLIENT_ID"], @Configuration["Spotify:SECRET"]);

      var response = await new OAuthClient(config).RequestToken(request);
        
      var spotify = new SpotifyClient(response);

      var playlist = await spotify.Playlists.Get("4bdpl8pjuQ7O5MBtiXEzpM");

      playlistName = playlist.Name;

      var allItems = await spotify.PaginateAll(playlist.Tracks);

      foreach (var item in allItems)
      {
        if (item.Track is FullTrack track)
        {
          Tracks.Add(track);
        }
      }

      StateHasChanged();
    }

}
