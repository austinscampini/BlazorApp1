@page "/counter"
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.VisualBasic
@using SpotifyAPI.Web
@using SpotifyAPI;
@using Swan.Threading
@using Microsoft.AspNetCore.WebUtilities;
@rendermode InteractiveServer
@inject IConfiguration Configuration
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

@if (Tracks == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <PageTitle>@playlistName</PageTitle>
        <h1>@playlistName</h1>
     <thead>
            <tr>
                <th>Track List</th>
            </tr>
        </thead>
    <table class="interactive-table">
        <tbody>
            @foreach (var Track in Tracks)
            {
                <tr href="/weather/@Track.Id">
                    <td>@Track.Album.Name</td>
                    <td>@Track.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FullTrack> Tracks { get; set; } = new List<FullTrack>();
    private String playlistName = "Loading";

    protected override async Task OnInitializedAsync()
    {

        await Task.Delay(10); 
        GetPlaylist();
    }
    private async void GetPlaylist() 
    {
        var config = SpotifyClientConfig.CreateDefault();

        var request = new ClientCredentialsRequest(@Configuration["Spotify:CLIENT_ID"], @Configuration["Spotify:SECRET"]);

        var response = await new OAuthClient(config).RequestToken(request);

        var spotify = new SpotifyClient(response);

        var playlist = await spotify.Playlists.Get("4bdpl8pjuQ7O5MBtiXEzpM");

        playlistName = playlist.Name;

        var allItems = await spotify.PaginateAll(playlist.Tracks);

        foreach (var item in allItems)
        {
            if (item.Track is FullTrack track)
            {
                Tracks.Add(track);
            }
        }

        StateHasChanged();
    }
}
