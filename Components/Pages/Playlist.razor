@page "/playlist"
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
@using Microsoft.VisualBasic
@using Newtonsoft.Json
@using SpotifyAPI.Web
@using SpotifyAPI;
@using Swan
@using Swan.Formatters
@using Swan.Threading
@using Microsoft.AspNetCore.WebUtilities;
@using System.Diagnostics.CodeAnalysis
@using System.Collections.Generic;
@using System.Text.RegularExpressions

@rendermode InteractiveServer
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

@if (Tracks == null)
{
    <p><em>Loading...</em></p>
}
else
{
     <thead>
            <div>
                <div class="playlist-header">
                <img class="playlist-cover" src="@imageUrl"></div>
                 <div class="playlist-info">
                    <h1 class="playlist-title">@playlistName</h1>
                    <span>@trackCount songs,</span> <span>about @playlistLengthHours hr @playlistLengthMinutes min</span>
                </div>
            </div>
        </thead>
    <table>
    <!-- Track List -->

        <tbody>
            @foreach (var Track in Tracks)
            {

                <tr class="interactive-table" @onclick="() => NavigateTo(Track.Id)">
                        <td>@Track.Album.Name</td>
                        <td>@Track.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FullTrack> Tracks { get; set; } = new List<FullTrack>();
    private String playlistName = "Loading";
    private String playlistDescription = "Loading";
    private int trackCount = 0;
    private int playlistLengthHours = 0;
    private int playlistLengthMinutes = 0;

    private SpotifyAPI.Web.Image spotifyImage;
    private String imageUrl;

    protected override async Task OnInitializedAsync()
    {

        await Task.Delay(1); 
        if(@Configuration["Spotify:CLIENT_ID"] is null || @Configuration["Spotify:SECRET"] is null) {
            FlagErrorPage();
        }
        GetPlaylist();
    }
    private async void GetPlaylist() 
    {
        try {

            var config = SpotifyClientConfig.CreateDefault();

            var request = new ClientCredentialsRequest(@Configuration["Spotify:CLIENT_ID"], @Configuration["Spotify:SECRET"]);

            var response = await new OAuthClient(config).RequestToken(request);

            var spotify = new SpotifyClient(response);

            var playlist = await spotify.Playlists.Get("4bdpl8pjuQ7O5MBtiXEzpM");

            int playlistTimeLength = 0;

            playlistName = playlist.Name;

            spotifyImage = playlist.Images.OrderByDescending(i => i.Width).FirstOrDefault();

            if(spotifyImage != null) {
                imageUrl = spotifyImage.Url;
            }

            playlistDescription = playlist.Description;

            var allItems = await spotify.PaginateAll(playlist.Tracks);

            foreach (var item in allItems)
            {
                if (item.Track is FullTrack track)
                {
                    Tracks.Add(track);
                    trackCount++;
                    playlistTimeLength += (track.DurationMs/60000);
                }
            }

            playlistLengthHours = playlistTimeLength / 60;
            playlistLengthMinutes =  playlistTimeLength % 60;

            StateHasChanged();
        } catch (NullReferenceException) {
                FlagErrorPage();
           
        }
    }

    private void NavigateTo(String refCode)
    {
        NavigationManager.NavigateTo($"/musicplayer/{refCode}");
    }

    private void FlagErrorPage() {
        NavigationManager.NavigateTo($"/error");
    }
    
}
